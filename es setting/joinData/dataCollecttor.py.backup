# -*- coding: utf-8 -*- 
import os  
import json
import time

dir = "D:\\cicv\\BBB new data"
fileList = os.listdir(dir)
print fileList

def matchLine(target,lines,index,maxIndex):
	if index >= maxIndex:
		return -1
	timeprefix = lines[index].replace('.','')[:11]
	
	if target < timeprefix:
		return -1
	
	while target != timeprefix:
		index += 1
		if index >= maxIndex:
			return -1
		timeprefix = lines[index].replace('.','')[:11]
		if target < timeprefix:
			return -1
	
	if target == timeprefix:
		return index
	else:
		return -1



for file in fileList:
	city = file.split('_')[0]
	
	#result data file
	resultFile = open(file+"_data.txt","w")
	
	#result = {}
	result = []
	thisLine = {}
	thisLine['city'] = city
	#file open
	canFile = open(dir+"\\"+file+"\\can\\can.csv",'r')
	gpsFile = open(dir+"\\"+file+"\\imu\\gpsfix.csv",'r')
	imuFile = open(dir+"\\"+file+"\\imu\\imudata.csv",'r')
	roadFile = open(dir+"\\"+file+"\\me\\ivsensormeroad.csv",'r')
	objFile = open(dir+"\\"+file+"\\me\\ivsensormeobj.csv",'r')
	imgFile = open(dir+"\\"+file+"\\imageList.csv",'r')
	webpFile = open(dir+"\\"+file+"\\webpList.csv",'r')
	imageMarkedFile = open(dir+"\\"+file+"\\imageMarkedList.csv",'r')
	pclFile = open(dir+"\\"+file+"\\pcl1.csv",'r')
	pclImgFile = open(dir+"\\"+file+"\\pcl1_image.csv",'r')

	
	canFile.readline()
	canLines = canFile.readlines()
	gpsFile.readline()
	gpsLines = gpsFile.readlines()
	imuFile.readline()
	imuLines = imuFile.readlines()
	roadFile.readline()
	roadLines = roadFile.readlines()
	objFile.readline()
	objLines = objFile.readlines()
	imgLines = imgFile.readlines()
	webpLines = webpFile.readlines()
	imageMarkedLines = imageMarkedFile.readlines()
	pclLines = pclFile.readlines()
	pclImgLines = pclImgFile.readlines()
	
	gpsLineLen = len(gpsLines)
	imuLineLen = len(imuLines)
	roadLineLen = len(roadLines)
	objLineLen = len(objLines)
	imgLineLen = len(imgLines)
	webpLineLen = len(webpLines)
	imageMarkedLineLen = len(imageMarkedLines)
	pclLineLen = len(pclLines)
	pclImgLineLen = len(pclImgLines)
	print gpsLineLen,imuLineLen,roadLineLen,objLineLen,imgLineLen,webpLineLen,imageMarkedLineLen,pclLineLen,pclImgLineLen
	
	gpsLineIndex = 0
	imuLineIndex = 0
	roadLineIndex = 0
	objLineIndex = 0
	imgLineIndex = 0
	webpLineIndex = 0
	imageMarkedLineIndex = 0
	pclLineIndex = 0
	pclImgLineIndex = 0
	
	canData = {}
	gpsData = {}
	imuData = {}
	roadData = {}
	objData = []
	imageData = ''
	webpData = ''
	imageMarkedData = ''
	pclData = ''
	pclImgData = ''
	
	for canLine in canLines:
		canLine = canLine[:-1]
		canFields = canLine.split(',')
		timeprefix = canFields[0][:11]
		#print timeprefix
		thisLine["timestamp"] = timeprefix
		thisLine["time"] = time.strftime("%Y/%m/%d %H:%M:%S", time.localtime(int(timeprefix[:-1])))
		canData['siVehicleSpeed'] = canFields[1]
		canData['siSteeringAngle'] = canFields[2]
		canData['siSteeringVelocity'] = canFields[3]
		canData['siBrakePressure'] = canFields[-5]
		canData['siAccelerationPedal'] = canFields[-1]
		
		tmp = matchLine(timeprefix,gpsLines,gpsLineIndex,gpsLineLen)
		#print tmp
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			gpsLineIndex = tmp
			gpsFields = gpsLines[gpsLineIndex][:-1].split(',')
			gpsData['latitude'] = gpsFields[6]
			gpsData['longitude'] = gpsFields[7]
			gpsData['altitude'] = gpsFields[8]
			gpsData['location'] = '('+gpsFields[6]+','+gpsFields[7]+')'
			gpsLineIndex+=1
			
		tmp = matchLine(timeprefix,imuLines,imuLineIndex,imuLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			imuLineIndex = tmp
			imuFields = imuLines[imuLineIndex][:-1].split(',')
			imuData['orientation_x'] = imuFields[4]
			imuData['orientation_y'] = imuFields[5]
			imuData['orientation_z'] = imuFields[6]
			imuData['angular_velocity_x'] = imuFields[17]
			imuData['angular_velocity_y'] = imuFields[18]
			imuData['angular_velocity_z'] = imuFields[19]
			imuData['linear_acceleration_x'] = imuFields[29]
			imuData['linear_acceleration_y'] = imuFields[30]
			imuData['linear_acceleration_z'] = imuFields[31]
			imuLineIndex += 1
			
		tmp = matchLine(timeprefix,roadLines,roadLineIndex,roadLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			roadLineIndex = tmp
			roadFields = roadLines[roadLineIndex][:-1].split(',')
			roadData['leftType'] = roadFields[1]
			roadData['righType'] = roadFields[2]
			roadData['curvature'] = roadFields[5]
			roadData['heading'] = roadFields[6]
			roadData['leftOffset'] = roadFields[7]
			roadData['rightOffset'] = roadFields[8]
			roadLineIndex += 1
			
		tmp = matchLine(timeprefix,objLines,objLineIndex,objLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			objLineIndex = tmp
			objFields = objLines[objLineIndex][:-1].split(',')
			num = len(objFields)//9

			if objFields[-1]=='1' and len(objFields)%9==2:
				for i in range(num):
					obj = {}
					obj['id'] = objFields[i*9+1]
					obj['x'] = objFields[i*9+2]
					obj['y'] = objFields[i*9+3]
					obj['relspeed'] = objFields[i*9+4]
					obj['width'] = objFields[i*9+5]
					obj['length'] = objFields[i*9+6]
					obj['height'] = objFields[i*9+7]
					obj['classification'] = objFields[i*9+9]
					objData.append(obj)
			else:
				print timeprefix+" obj failed"
			objLineIndex += 1
		
		tmp = matchLine(timeprefix,imgLines,imgLineIndex,imgLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			imgLineIndex = tmp
			imgFields = imgLines[imgLineIndex][:-1].split(',')
			imageData = imgFields[1]
			imgLineIndex += 1
			
		tmp = matchLine(timeprefix,webpLines,webpLineIndex,webpLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			webpLineIndex = tmp
			webpFields = webpLines[webpLineIndex][:-1].split(',')
			webpData = webpFields[1]
			webpLineIndex += 1
			
		tmp = matchLine(timeprefix,imageMarkedLines,imageMarkedLineIndex,imageMarkedLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			imageMarkedLineIndex = tmp
			imageMarkedFields = imageMarkedLines[imageMarkedLineIndex][:-1].split(',')
			imageMarkedData = imageMarkedFields[1]
			imageMarkedLineIndex += 1
		
		tmp = matchLine(timeprefix,pclLines,pclLineIndex,pclLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			objData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			pclLineIndex = tmp
			pclFields = pclLines[pclLineIndex][:-1].split(',')
			pclData = pclFields[1]
			pclLineIndex += 1
			
		tmp = matchLine(timeprefix,pclImgLines,pclImgLineIndex,pclImgLineLen)
		if tmp == -1:
			canData = {}
			gpsData = {}
			imuData = {}
			roadData = {}
			imgData = []
			imageData = ''
			webpData = ''
			imageMarkedData = ''
			pclData = ''
			pclImgData = ''
			continue
		else:
			pclImgLineIndex = tmp
			pclImgFields = pclImgLines[pclImgLineIndex][:-1].split(',')
			pclImgData = pclImgFields[1]
			pclImgLineIndex += 1
		
		thisLine["can"] = canData
		thisLine["gps"] = gpsData
		thisLine["imu"] = imuData
		thisLine["road"] = roadData
		thisLine["obj"] = objData
		thisLine["image"] = imageData
		thisLine["webp"] = webpData
		thisLine["image_marked"] = imageMarkedData
		thisLine["pcl1"] = pclData
		thisLine["pcl1_image"] = pclImgData
	
		#result.append(thisLine)
		json_str = json.dumps(thisLine)
		resultFile.write(json_str+'\n')
		
		thisLine = {}
		thisLine['city'] = city
		canData = {}
		gpsData = {}
		imuData = {}
		roadData = {}
		objData = []
		imageData = ''
		webpData = ''
		pclData = ''
		pclImgData = ''
		if len(result) >=300:
			print timeprefix
			break
	print len(result)
	#rs = {"result":result}
	#json_str = json.dumps(rs)
	#resultFile.write(json_str)
	resultFile.close()
	canFile.close()
	gpsFile.close()
	imuFile.close()
	roadFile.close()
	objFile.close()
	imgFile.close()
	webpFile.close()
	pclFile.close()
	pclImgFile.close()






